{"mappings":"AAAA,MAAM,KAAK;IACP,YAAY,EAAE,QAAQ,CAAA,EAAE,UAAU,CAAA,EAAE,CAAE;QAClC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAE7B,IAAI,CAAC,IAAI,GAAG;YACR,QAAQ,EAAE,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC;YAC5C,SAAS,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,CAAC,wBAAwB,CAAC,CAAC;YACxE,UAAU,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,CAAC,yBAAyB,CAAC,CAAC;YAC1E,YAAY,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,CAAC,wBAAwB,CAAC,CAAC;YAC3E,YAAY,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,QAAQ,CAAC,wBAAwB,CAAC,CAAC;SAC9E,CAAC;QACF,IAAI,CAAC,KAAK,EAAE,CAAC;KAChB;IAED,KAAK,GAAG;QACJ,WAAW,CAAC,IAAM;YACd,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,AAAC;YAC/C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;SAC3D,EAAE,IAAI,CAAC,CAAC;KACZ;IAGD,eAAe,CAAC,EAAE,IAAI,CAAA,EAAE,KAAK,CAAA,EAAE,IAAI,CAAA,EAAE,IAAI,CAAA,EAAE,EAAE;QAC7C,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,KAAK,CAAC;QACvC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC;KAC3C;IAEG,iBAAiB,CAAC,IAAI,EAAE;QACpB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAI,QAAmB,AAAC,CAAC,CAAC,AAAC;QAC3D,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,AAAC,IAAI,GAAI,QAAmB,GAAM,OAAc,AAAC,CAAC,CAAC,AAAC;QACjF,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,AAAC,IAAI,GAAI,OAAc,GAAM,KAAS,AAAC,CAAC,CAAC,AAAC;QACtE,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,AAAC,IAAI,GAAI,KAAS,GAAK,IAAI,CAAC,CAAC,AAAC;QAE1D,OAAO;YAAE,IAAI;YAAE,KAAK;YAAE,IAAI;YAAE,IAAI;SAAE,CAAC;KACtC;CACJ;AACG,SAAS,GAAG,CAAC,KAAK,EAAE;IAChB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;CAC7C;AACD,MAAM,cAAc,GAAG,IAAI,KAAK,CAAC;IAC7B,QAAQ,EAAE,UAAU;IACpB,UAAU,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC;CACvC,CAAC,AAAC","sources":["src/js/timer.js"],"sourcesContent":["class Timer {\n    constructor({ selector, targetDate }) {\n        this.selector = selector;\n        this.targetDate = targetDate;\n\n        this.refs = {\n            timerBox: document.querySelector('#timer-1'),\n            daysTimer: document.querySelector(`${selector} span[data-value=\"days\"]`),\n            hoursTimer: document.querySelector(`${selector} span[data-value=\"hours\"]`),\n            minutesTimer: document.querySelector(`${selector} span[data-value=\"mins\"]`),\n            secondsTimer: document.querySelector(`${selector} span[data-value=\"secs\"]`),\n        };\n        this.start();\n    }\n\n    start() {\n        setInterval(() => {\n            const deltaTime = this.targetDate - Date.now();\n            this.updateClockface(this.getTimeComponents(deltaTime));\n        }, 1000);\n    }\n\n    \n    updateClockface({ days, hours, mins, secs }) {\n    this.refs.daysTimer.innerHTML = days;\n    this.refs.hoursTimer.innerHTML = hours;\n    this.refs.minutesTimer.innerHTML = mins;\n    this.refs.secondsTimer.innerHTML = secs;\n}\n    \n    getTimeComponents(time) {\n        const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n        const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n        return { days, hours, mins, secs };\n    }\n}\n    function pad(value) {\n        return String(value).padStart(2, '0');\n}\nconst CountDownTimer = new Timer({\n    selector: '#timer-1',\n    targetDate: new Date('Oct 30, 2022'),\n});"],"names":[],"version":3,"file":"index.3f333593.js.map","sourceRoot":"/__parcel_source_root/"}